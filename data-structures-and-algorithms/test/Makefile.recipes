#TODO this will set verbose to have the value 1 or yes.
#verbose = $(if $(or $(findstring yes,$(v)),$(findstring 1, $(v))),,@)

# source files
c_srcs := $(wildcard *.$(c_ext)) $(wildcard */*.$(c_ext))
cpp_srcs := $(wildcard *.$(cpp_ext)) $(wildcard */*.$(cpp_ext))

# object files
objs += $(c_srcs:%.$(c_ext)=%.o) $(cpp_srcs:%.$(cpp_ext)=%.o) 

h := $(wildcard *.h)
hpp := $(wildcard *.hpp)
incs := $(h) $(hpp)

# dependency files
DEPS = $(objs:.o=.d)
    
.PHONY: all
all: $(objs) $(incs)
    
-include $(DEPS)

# Source file rules
# After the first compilation they will be joined with the rules from the
# dependency files to provide header dependencies
%.o: %.$(cpp_ext)
	@echo "    $< -> $@"
	$(verbose)$(CXX) $(dependency_files) $(CPPFLAGS) $(optimize_flags) $(defines) $(INCLUDES) -c $(realpath $<) -o $@

%.o: %.$(c_ext)
	@echo "    $< -> $@"
	$(verbose)$(CC) $(dependency_files) $(CFLAGS) $(optimize_flags) $(defines) $(INCLUDES) -c $(realpath $<) -o $@

.PHONY: clean
clean:
	@find . -type f -name '*.o' -delete
	@find . -type f -name '*.d' -delete
	@find . -type f -name '*.gcda' -delete
	@find . -type f -name '*.gcno' -delete
	@find . -type f -name '*.gcov' -delete

print-%: ; @echo $* = $($*)
